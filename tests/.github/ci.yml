name: CI Pipeline

# Quando o workflow será executado
on:
  push:
    branches: [ main ] # Executa em pushes para a branch main
  pull_request:
    branches: [ main ] # Executa em pull requests para main
  schedule:
    - cron: '0 * * * *' # Executa a cada hora (opcional, para monitoramento)

# Jobs a serem executados
jobs:
  test:
    runs-on: ubuntu-latest # Máquina virtual usada

    steps:
    # Clona o repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura o Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Escolha a versão do Python

    # Instala dependências
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Executa os testes
    - name: Run tests
      run: python -m unittest discover -s tests

  monitor:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Executa apenas no schedule
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Executa o script de monitoramento
    - name: Run monitor script
      run: python monitor.py

    # (Opcional) Notifica se falhar
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Monitoramento Falhou',
            body: 'O script de monitoramento detectou um problema. Verifique os logs.'
          })